##############################################
############### DEFAULT ######################
##############################################
# Default Section
[default]
prometheusResource = /metrics
prometheusServer = :8989
##############################################

##############################################
############### OUTPUT #######################
##############################################
# Example of a tap output; dump content to file and count messages
[inspector]
goal = output
type = tap
outputFile = dump.txt
raw = true
datachanneldepth = 1000
countonly = false  
##############################################
# Example of a kafka output;
# [kafkaOut]
# goal = output
# type = kafka
# #key = id
# brokers = 10.132.0.7:19092
# topic = telemetry
# #topicMetadataTemplate = topicTemplateTestb.txt
# #required_acks options are "local" and "commit", we default to "none".
# requiredAcks = commit
# datachanneldepth = 1000
# logdata = on
##############################################
# example of a metrics output prometheus
# [metrics]
# goal = output
# type = metrics
# output = prometheus
# #metricsInputFileSpec = metrics.json
# #statsensorcount = 1000
# datachanneldepth = 1000
# pushgw = localhost:9091
# workers = 1
# jobname = telemetry

##############################################
# example of a metrics output influxdb
[metrics]
goal = output
type = metrics
output = influx
influxDBServer = http://172.17.0.4:8086
username = admin
password = Alcateldc
database = test3
workers = 10
datachanneldepth = 1000

##############################################
############### INPUT ########################
##############################################
# Example of a gRPC dialin (collector connects to a router over gRPC)
# [sros1]
# goal = input
# type = grpc
# encap = proto
# encodingName = JSON
# server = 138.203.18.88:57400
# subscriptions = /state/router[router-name=Base]/interface[interface-name=*]/statistics/ip/
# insecure = true
# tls = false
# tlsCAPem = ca.pem
# tlsClientCertPem = client-cert.pem
# tlsClientKeyPem = client-key.pem
# tlsServerName = LS-srlinux-L1
# username = admin
# password = admin
##############################################
# Example of a gRPC dialin (collector connects to a router over gRPC)
[srlinux-L1]
goal = input
type = grpc
encap = proto
encodingName = JSON
server = 172.18.18.2:50052
subscriptions = /interface[name=mgmt0]/ethernet/statistics
insecure = true
tls = true
tlsCAPem = ca.pem
tlsClientCertPem = client-cert.pem
tlsClientKeyPem = client-key.pem
tlsServerName = LS-srlinux-L1
username = admin
password = admin

[srlinux-L2]
goal = input
type = grpc
encap = proto
encodingName = JSON
server = 172.18.18.3:50052
subscriptions = /interface[name=mgmt0]/ethernet/statistics
insecure = true
tls = true
tlsCAPem = ca.pem
tlsClientCertPem = client-cert.pem
tlsClientKeyPem = client-key.pem
tlsServerName = LS-srlinux-L1
username = admin
password = admin

[srlinux-L3]
goal = input
type = grpc
encap = proto
encodingName = JSON
server = 172.18.18.4:50052
subscriptions = /interface[name=mgmt0]/ethernet/statistics
insecure = true
tls = true
tlsCAPem = ca.pem
tlsClientCertPem = client-cert.pem
tlsClientKeyPem = client-key.pem
tlsServerName = LS-srlinux-L1
username = admin
password = admin
##############################################
[kafkaconsumer]
goal = input
type = kafka
#key = path_and_id
brokers = 10.132.0.7:19092
topic = telemetry
consumergroup = mycollectors
logdata = on
